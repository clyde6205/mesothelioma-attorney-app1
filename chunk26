'use client'
import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Users,
  MessageCircle,
  DollarSign,
  Calendar,
  Phone,
  Mail,
  Download,
  Upload,
  Settings,
  BarChart3,
  FileText,
  Shield,
  Bell,
  Search,
  Filter,
  MoreHorizontal,
  Plus,
  Edit,
  Trash2,
  Eye,
  CheckCircle,
  XCircle,
  Clock,
  TrendingUp,
  TrendingDown,
  Activity
} from 'lucide-react'

interface Lead {
  id: string
  name: string
  email: string
  phone: string
  state: string
  status: string
  riskScore: number
  createdAt: string
  lastContacted?: string
  contactCount: number
  whatsappOptIn: boolean
  messagesCount: number
  paymentsCount: number
}

interface DashboardStats {
  totalLeads: number
  newLeads: number
  contactedLeads: number
  qualifiedLeads: number
  totalRevenue: number
  monthlyRevenue: number
  conversionRate: number
  avgResponseTime: number
}

export default function AdminDashboard() {
  const [leads, setLeads] = useState<Lead[]>([])
  const [stats, setStats] = useState<DashboardStats>({
    totalLeads: 0,
    newLeads: 0,
    contactedLeads: 0,
    qualifiedLeads: 0,
    totalRevenue: 0,
    monthlyRevenue: 0,
    conversionRate: 0,
    avgResponseTime: 0
  })
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [selectedLeads, setSelectedLeads] = useState<string[]>([])

  // Mock data - replace with actual API calls
  useEffect(() => {
    const mockLeads: Lead[] = [
      {
        id: '1',
        name: 'John Smith',
        email: 'john@example.com',
        phone: '(555) 123-4567',
        state: 'California',
        status: 'NEW',
        riskScore: 18,
        createdAt: '2024-01-15',
        contactCount: 0,
        whatsappOptIn: true,
        messagesCount: 0,
        paymentsCount: 0
      },
      {
        id: '2',
        name: 'Sarah Johnson',
        email: 'sarah@example.com',
        phone: '(555) 987-6543',
        state: 'Texas',
        status: 'CONTACTED',
        riskScore: 22,
        createdAt: '2024-01-14',
        lastContacted: '2024-01-15',
        contactCount: 2,
        whatsappOptIn: false,
        messagesCount: 3,
        paymentsCount: 1
      }
    ]
    setLeads(mockLeads)
    setStats({
      totalLeads: 1247,
      newLeads: 23,
      contactedLeads: 156,
      qualifiedLeads: 89,
      totalRevenue: 2847500,
      monthlyRevenue: 156800,
      conversionRate: 12.5,
      avgResponseTime: 2.3
    })
  }, [])

  const filteredLeads = leads.filter(lead => {
    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         lead.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         lead.phone.includes(searchTerm)
    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter
    return matchesSearch && matchesStatus
  })

  const getStatusBadge = (status: string) => {
    const variants = {
      NEW: 'bg-blue-100 text-blue-800',
      CONTACTED: 'bg-yellow-100 text-yellow-800',
      QUALIFIED: 'bg-green-100 text-green-800',
      SOLD: 'bg-purple-100 text-purple-800',
      REJECTED: 'bg-red-100 text-red-800'
    }
    return variants[status as keyof typeof variants] || 'bg-gray-100 text-gray-800'
  }

  const getRiskLevel = (score: number) => {
    if (score >= 20) return { level: 'High', color: 'text-red-600' }
    if (score >= 15) return { level: 'Medium', color: 'text-yellow-600'
