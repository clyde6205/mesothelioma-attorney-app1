import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { WhatsAppService } from '@/lib/whatsapp'
import sgMail from '@sendgrid/mail'
import { z } from 'zod'

// Configure SendGrid
if (process.env.SENDGRID_API_KEY) {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY)
}

const leadSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Valid email is required'),
  phone: z.string().min(10, 'Valid phone number is required'),
  state: z.string().min(1, 'State is required'),
  exposureYear: z.string().optional(),
  exposureType: z.string().optional(),
  symptoms: z.string().optional(),
  riskScore: z.number().min(0).max(25),
  source: z.string().default('website'),
  campaign: z.string().optional(),
  utmSource: z.string().optional(),
  utmMedium: z.string().optional(),
  utmCampaign: z.string().optional(),
  consentGiven: z.boolean().default(false),
  gdprConsent: z.boolean().default(false),
  hipaaConsent: z.boolean().default(false),
  preferredContact: z.string().optional(),
  bestTimeToCall: z.string().optional(),
  urgency: z.string().optional(),
  additionalInfo: z.string().optional()
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
   
    // Validate the request body
    const validatedData = leadSchema.parse(body)
   
    // Check for duplicate leads
    const existingLead = await prisma.lead.findFirst({
      where: {
        OR: [
          { email: validatedData.email },
          { phone: validatedData.phone }
        ]
      }
    })
    if (existingLead) {
      // Update existing lead with new information
      const updatedLead = await prisma.lead.update({
        where: { id: existingLead.id },
        data: {
          ...validatedData,
          updatedAt: new Date(),
          contactCount: { increment: 1 },
          lastContacted: new Date()
        }
      })
      // Send notifications for existing lead update
      await sendLeadNotifications(updatedLead, 'update')
     
      return NextResponse.json({
        success: true,
        message: 'Lead updated successfully',
        leadId: updatedLead.id,
        isNewLead: false
      })
    }
    // Create new lead
    const newLead = await prisma.lead.create({
      data: {
        ...validatedData,
        status: 'NEW',
        contactCount: 0,
        whatsappOptIn: validatedData.preferredContact === 'whatsapp'
      }
    })
    // Send notifications for new lead
    await sendLeadNotifications(newLead, 'new')
    // Send welcome WhatsApp message if opted in
    if (validatedData.preferredContact === 'whatsapp') {
      const whatsappService = new WhatsAppService()
      await whatsappService.sendWelcomeMessage(validatedData.phone, validatedData.name)
    }
    return NextResponse.json({
      success: true,
      message: 'Lead created successfully',
      leadId: newLead.id,
      isNewLead: true
    })
  } catch (error) {
    console.error('Lead creation error:', error)
   
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '10')
    const status = searchParams.get('status')
    const state = searchParams.get('state')
    const search = searchParams.get('search')
    const skip = (page - 1) * limit
    // Build where clause
    const where: any = {}
   
    if (status) {
      where.status = status
    }
   
    if (state) {
      where.state = state
    }
   
    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { email: { contains: search, mode: 'insensitive' } },
        { phone: { contains: search } }
      ]
    }
    const [leads, total] = await Promise.all([
      prisma.lead.findMany({
        where,
        skip,
        take: limit,
        orderBy
